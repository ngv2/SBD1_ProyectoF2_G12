-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-04-24 10:08:12 CST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE asignacion (
    estudiante_carnet    INTEGER NOT NULL,
    seccion_curso_codigo INTEGER NOT NULL,
    seccion_seccion      VARCHAR2(2) NOT NULL,
    seccion_anio         VARCHAR2(4) NOT NULL,
    seccion_ciclo        VARCHAR2(50) NOT NULL,
    zona                 INTEGER NOT NULL,
    nota                 INTEGER NOT NULL
);

ALTER TABLE asignacion
    ADD CONSTRAINT asignacion_pk PRIMARY KEY ( seccion_seccion,
                                               seccion_anio,
                                               seccion_ciclo,
                                               seccion_curso_codigo,
                                               estudiante_carnet );


CREATE TABLE Asignacion_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Estudiante_Carnet INTEGER NOT NULL
 ,Seccion_Curso_Codigo INTEGER NOT NULL
 ,Seccion_Seccion VARCHAR2 (2) NOT NULL
 ,Seccion_Anio VARCHAR2 (4) NOT NULL
 ,Seccion_Ciclo VARCHAR2 (50) NOT NULL
 ,Zona INTEGER NOT NULL
 ,Nota INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Asignacion_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Asignacion for each row 
 Declare 
  rec Asignacion_JN%ROWTYPE; 
  blank Asignacion_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Estudiante_Carnet := :NEW.Estudiante_Carnet; 
      rec.Seccion_Curso_Codigo := :NEW.Seccion_Curso_Codigo; 
      rec.Seccion_Seccion := :NEW.Seccion_Seccion; 
      rec.Seccion_Anio := :NEW.Seccion_Anio; 
      rec.Seccion_Ciclo := :NEW.Seccion_Ciclo; 
      rec.Zona := :NEW.Zona; 
      rec.Nota := :NEW.Nota; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Estudiante_Carnet := :OLD.Estudiante_Carnet; 
      rec.Seccion_Curso_Codigo := :OLD.Seccion_Curso_Codigo; 
      rec.Seccion_Seccion := :OLD.Seccion_Seccion; 
      rec.Seccion_Anio := :OLD.Seccion_Anio; 
      rec.Seccion_Ciclo := :OLD.Seccion_Ciclo; 
      rec.Zona := :OLD.Zona; 
      rec.Nota := :OLD.Nota; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Asignacion_JN VALUES rec; 
  END; 
  /CREATE TABLE carrera (
    carrera INTEGER NOT NULL,
    nombre  VARCHAR2(20) NOT NULL
);

ALTER TABLE carrera ADD CONSTRAINT carrera_pk PRIMARY KEY ( carrera );


CREATE TABLE Carrera_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Carrera INTEGER NOT NULL
 ,Nombre VARCHAR2 (20) NOT NULL
 );

CREATE OR REPLACE TRIGGER Carrera_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Carrera for each row 
 Declare 
  rec Carrera_JN%ROWTYPE; 
  blank Carrera_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Carrera := :NEW.Carrera; 
      rec.Nombre := :NEW.Nombre; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Carrera := :OLD.Carrera; 
      rec.Nombre := :OLD.Nombre; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Carrera_JN VALUES rec; 
  END; 
  /CREATE TABLE catedratico (
    cat             INTEGER NOT NULL,
    nombre          VARCHAR2(50) NOT NULL,
    sueldomensual   INTEGER NOT NULL,
    apellido        VARCHAR2(50) NOT NULL,
    fechanacimiento DATE NOT NULL,
    correo          VARCHAR2(250) NOT NULL,
    telefono        VARCHAR2(20) NOT NULL,
    direccion       VARCHAR2(150) NOT NULL,
    dpi             NUMBER(13) NOT NULL
);

ALTER TABLE catedratico ADD CONSTRAINT catedratico_pk PRIMARY KEY ( cat );


CREATE TABLE Catedratico_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Cat INTEGER NOT NULL
 ,Nombre VARCHAR2 (50) NOT NULL
 ,SueldoMensual INTEGER NOT NULL
 ,Apellido VARCHAR2 (50) NOT NULL
 ,FechaNacimiento DATE NOT NULL
 ,Correo VARCHAR2 (250) NOT NULL
 ,Telefono VARCHAR2 (20) NOT NULL
 ,Direccion VARCHAR2 (150) NOT NULL
 ,DPI NUMBER (13) NOT NULL
 );

CREATE OR REPLACE TRIGGER Catedratico_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Catedratico for each row 
 Declare 
  rec Catedratico_JN%ROWTYPE; 
  blank Catedratico_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Cat := :NEW.Cat; 
      rec.Nombre := :NEW.Nombre; 
      rec.SueldoMensual := :NEW.SueldoMensual; 
      rec.Apellido := :NEW.Apellido; 
      rec.FechaNacimiento := :NEW.FechaNacimiento; 
      rec.Correo := :NEW.Correo; 
      rec.Telefono := :NEW.Telefono; 
      rec.Direccion := :NEW.Direccion; 
      rec.DPI := :NEW.DPI; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Cat := :OLD.Cat; 
      rec.Nombre := :OLD.Nombre; 
      rec.SueldoMensual := :OLD.SueldoMensual; 
      rec.Apellido := :OLD.Apellido; 
      rec.FechaNacimiento := :OLD.FechaNacimiento; 
      rec.Correo := :OLD.Correo; 
      rec.Telefono := :OLD.Telefono; 
      rec.Direccion := :OLD.Direccion; 
      rec.DPI := :OLD.DPI; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Catedratico_JN VALUES rec; 
  END; 
  /CREATE TABLE curso (
    codigo INTEGER NOT NULL,
    nombre VARCHAR2(50) NOT NULL
);

ALTER TABLE curso ADD CONSTRAINT curso_pk PRIMARY KEY ( codigo );


CREATE TABLE Curso_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Codigo INTEGER NOT NULL
 ,Nombre VARCHAR2 (50) NOT NULL
 );

CREATE OR REPLACE TRIGGER Curso_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Curso for each row 
 Declare 
  rec Curso_JN%ROWTYPE; 
  blank Curso_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Codigo := :NEW.Codigo; 
      rec.Nombre := :NEW.Nombre; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Codigo := :OLD.Codigo; 
      rec.Nombre := :OLD.Nombre; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Curso_JN VALUES rec; 
  END; 
  /CREATE TABLE dia (
    dia    INTEGER NOT NULL,
    nombre VARCHAR2(50) NOT NULL
);

ALTER TABLE dia ADD CONSTRAINT dia_pk PRIMARY KEY ( dia );


CREATE TABLE Dia_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Dia INTEGER NOT NULL
 ,Nombre VARCHAR2 (50) NOT NULL
 );

CREATE OR REPLACE TRIGGER Dia_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Dia for each row 
 Declare 
  rec Dia_JN%ROWTYPE; 
  blank Dia_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Dia := :NEW.Dia; 
      rec.Nombre := :NEW.Nombre; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Dia := :OLD.Dia; 
      rec.Nombre := :OLD.Nombre; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Dia_JN VALUES rec; 
  END; 
  /CREATE TABLE estudiante (
    carnet          INTEGER NOT NULL,
    nombre          VARCHAR2(50) NOT NULL,
    ingresofamiliar INTEGER NOT NULL,
    fechanacimiento DATE,
    apellido        VARCHAR2(50) NOT NULL,
    correo          VARCHAR2(250) NOT NULL,
    telefono        VARCHAR2(20) NOT NULL,
    direccion       VARCHAR2(150),
    dpi             NUMBER(13) NOT NULL
);

ALTER TABLE estudiante ADD CONSTRAINT estudiante_pk PRIMARY KEY ( carnet );


CREATE TABLE Estudiante_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Carnet INTEGER NOT NULL
 ,Nombre VARCHAR2 (50) NOT NULL
 ,IngresoFamiliar INTEGER NOT NULL
 ,FechaNacimiento DATE
 ,Apellido VARCHAR2 (50) NOT NULL
 ,Correo VARCHAR2 (250) NOT NULL
 ,Telefono VARCHAR2 (20) NOT NULL
 ,Direccion VARCHAR2 (150)
 ,DPI NUMBER (13) NOT NULL
 );

CREATE OR REPLACE TRIGGER Estudiante_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Estudiante for each row 
 Declare 
  rec Estudiante_JN%ROWTYPE; 
  blank Estudiante_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Carnet := :NEW.Carnet; 
      rec.Nombre := :NEW.Nombre; 
      rec.IngresoFamiliar := :NEW.IngresoFamiliar; 
      rec.FechaNacimiento := :NEW.FechaNacimiento; 
      rec.Apellido := :NEW.Apellido; 
      rec.Correo := :NEW.Correo; 
      rec.Telefono := :NEW.Telefono; 
      rec.Direccion := :NEW.Direccion; 
      rec.DPI := :NEW.DPI; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Carnet := :OLD.Carnet; 
      rec.Nombre := :OLD.Nombre; 
      rec.IngresoFamiliar := :OLD.IngresoFamiliar; 
      rec.FechaNacimiento := :OLD.FechaNacimiento; 
      rec.Apellido := :OLD.Apellido; 
      rec.Correo := :OLD.Correo; 
      rec.Telefono := :OLD.Telefono; 
      rec.Direccion := :OLD.Direccion; 
      rec.DPI := :OLD.DPI; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Estudiante_JN VALUES rec; 
  END; 
  /CREATE TABLE horario (
    seccion_curso_codigo INTEGER NOT NULL,
    seccion_seccion      VARCHAR2(2) NOT NULL,
    seccion_anio         VARCHAR2(4) NOT NULL,
    seccion_ciclo        VARCHAR2(50) NOT NULL,
    periodo_periodo      INTEGER NOT NULL,
    dia_dia              INTEGER NOT NULL,
    salon_edificio       VARCHAR2(10) NOT NULL,
    salon_salon          VARCHAR2(10) NOT NULL
);

ALTER TABLE horario
    ADD CONSTRAINT horario_pk PRIMARY KEY ( dia_dia,
                                            periodo_periodo,
                                            seccion_seccion,
                                            seccion_anio,
                                            seccion_ciclo,
                                            seccion_curso_codigo );


CREATE TABLE Horario_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Seccion_Curso_Codigo INTEGER NOT NULL
 ,Seccion_Seccion VARCHAR2 (2) NOT NULL
 ,Seccion_Anio VARCHAR2 (4) NOT NULL
 ,Seccion_Ciclo VARCHAR2 (50) NOT NULL
 ,Periodo_Periodo INTEGER NOT NULL
 ,Dia_Dia INTEGER NOT NULL
 ,Salon_Edificio VARCHAR2 (10) NOT NULL
 ,Salon_Salon VARCHAR2 (10) NOT NULL
 );

CREATE OR REPLACE TRIGGER Horario_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Horario for each row 
 Declare 
  rec Horario_JN%ROWTYPE; 
  blank Horario_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Seccion_Curso_Codigo := :NEW.Seccion_Curso_Codigo; 
      rec.Seccion_Seccion := :NEW.Seccion_Seccion; 
      rec.Seccion_Anio := :NEW.Seccion_Anio; 
      rec.Seccion_Ciclo := :NEW.Seccion_Ciclo; 
      rec.Periodo_Periodo := :NEW.Periodo_Periodo; 
      rec.Dia_Dia := :NEW.Dia_Dia; 
      rec.Salon_Edificio := :NEW.Salon_Edificio; 
      rec.Salon_Salon := :NEW.Salon_Salon; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Seccion_Curso_Codigo := :OLD.Seccion_Curso_Codigo; 
      rec.Seccion_Seccion := :OLD.Seccion_Seccion; 
      rec.Seccion_Anio := :OLD.Seccion_Anio; 
      rec.Seccion_Ciclo := :OLD.Seccion_Ciclo; 
      rec.Periodo_Periodo := :OLD.Periodo_Periodo; 
      rec.Dia_Dia := :OLD.Dia_Dia; 
      rec.Salon_Edificio := :OLD.Salon_Edificio; 
      rec.Salon_Salon := :OLD.Salon_Salon; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Horario_JN VALUES rec; 
  END; 
  /CREATE TABLE inscrito (
    fechainscripcion  DATE NOT NULL,
    carrera_carrera   INTEGER NOT NULL,
    estudiante_carnet INTEGER NOT NULL
);

ALTER TABLE inscrito ADD CONSTRAINT inscrito_pk PRIMARY KEY ( estudiante_carnet,
                                                              carrera_carrera );


CREATE TABLE Inscrito_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,FechaInscripcion DATE NOT NULL
 ,Carrera_Carrera INTEGER NOT NULL
 ,Estudiante_Carnet INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Inscrito_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Inscrito for each row 
 Declare 
  rec Inscrito_JN%ROWTYPE; 
  blank Inscrito_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.FechaInscripcion := :NEW.FechaInscripcion; 
      rec.Carrera_Carrera := :NEW.Carrera_Carrera; 
      rec.Estudiante_Carnet := :NEW.Estudiante_Carnet; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.FechaInscripcion := :OLD.FechaInscripcion; 
      rec.Carrera_Carrera := :OLD.Carrera_Carrera; 
      rec.Estudiante_Carnet := :OLD.Estudiante_Carnet; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Inscrito_JN VALUES rec; 
  END; 
  /CREATE TABLE pensum (
    curso_codigo         INTEGER NOT NULL,
    plan_plan            VARCHAR2(10) NOT NULL,
    plan_carrera_carrera INTEGER NOT NULL,
    obligatoriedad       VARCHAR2(1) NOT NULL,
    numcreditos          INTEGER NOT NULL,
    notaaprobacion       INTEGER NOT NULL,
    zonaminima           INTEGER NOT NULL,
    credprerreq          INTEGER NOT NULL
);

ALTER TABLE pensum
    ADD CONSTRAINT pensum_pk PRIMARY KEY ( curso_codigo,
                                           plan_plan,
                                           plan_carrera_carrera );


CREATE TABLE Pensum_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Curso_Codigo INTEGER NOT NULL
 ,Plan_Plan VARCHAR2 (10) NOT NULL
 ,Plan_Carrera_Carrera INTEGER NOT NULL
 ,Obligatoriedad VARCHAR2 (1) NOT NULL
 ,NumCreditos INTEGER NOT NULL
 ,NotaAprobacion INTEGER NOT NULL
 ,ZonaMinima INTEGER NOT NULL
 ,CredPrerreq INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Pensum_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Pensum for each row 
 Declare 
  rec Pensum_JN%ROWTYPE; 
  blank Pensum_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Curso_Codigo := :NEW.Curso_Codigo; 
      rec.Plan_Plan := :NEW.Plan_Plan; 
      rec.Plan_Carrera_Carrera := :NEW.Plan_Carrera_Carrera; 
      rec.Obligatoriedad := :NEW.Obligatoriedad; 
      rec.NumCreditos := :NEW.NumCreditos; 
      rec.NotaAprobacion := :NEW.NotaAprobacion; 
      rec.ZonaMinima := :NEW.ZonaMinima; 
      rec.CredPrerreq := :NEW.CredPrerreq; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Curso_Codigo := :OLD.Curso_Codigo; 
      rec.Plan_Plan := :OLD.Plan_Plan; 
      rec.Plan_Carrera_Carrera := :OLD.Plan_Carrera_Carrera; 
      rec.Obligatoriedad := :OLD.Obligatoriedad; 
      rec.NumCreditos := :OLD.NumCreditos; 
      rec.NotaAprobacion := :OLD.NotaAprobacion; 
      rec.ZonaMinima := :OLD.ZonaMinima; 
      rec.CredPrerreq := :OLD.CredPrerreq; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Pensum_JN VALUES rec; 
  END; 
  /CREATE TABLE periodo (
    periodo    INTEGER NOT NULL,
    horainicio DATE NOT NULL,
    horafin    DATE NOT NULL
);

ALTER TABLE periodo ADD CONSTRAINT periodo_pk PRIMARY KEY ( periodo );


CREATE TABLE Periodo_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Periodo INTEGER NOT NULL
 ,HoraInicio DATE NOT NULL
 ,HoraFin DATE NOT NULL
 );

CREATE OR REPLACE TRIGGER Periodo_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Periodo for each row 
 Declare 
  rec Periodo_JN%ROWTYPE; 
  blank Periodo_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Periodo := :NEW.Periodo; 
      rec.HoraInicio := :NEW.HoraInicio; 
      rec.HoraFin := :NEW.HoraFin; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Periodo := :OLD.Periodo; 
      rec.HoraInicio := :OLD.HoraInicio; 
      rec.HoraFin := :OLD.HoraFin; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Periodo_JN VALUES rec; 
  END; 
  /CREATE TABLE plan (
    plan              VARCHAR2(10) NOT NULL,
    carrera_carrera   INTEGER NOT NULL,
    nombre            VARCHAR2(50) NOT NULL,
    anoinicial        VARCHAR2(4) NOT NULL,
    cicloinicial      VARCHAR2(50) NOT NULL,
    anofinal          VARCHAR2(4) NOT NULL,
    ciclofinal        VARCHAR2(50) NOT NULL,
    numcreditoscierre INTEGER NOT NULL
);

ALTER TABLE plan ADD CONSTRAINT plan_pk PRIMARY KEY ( plan,
                                                      carrera_carrera );


CREATE TABLE Plan_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Plan VARCHAR2 (10) NOT NULL
 ,Carrera_Carrera INTEGER NOT NULL
 ,Nombre VARCHAR2 (50) NOT NULL
 ,AnoInicial VARCHAR2 (4) NOT NULL
 ,CicloInicial VARCHAR2 (50) NOT NULL
 ,AnoFinal VARCHAR2 (4) NOT NULL
 ,CicloFinal VARCHAR2 (50) NOT NULL
 ,NumCreditosCierre INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Plan_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Plan for each row 
 Declare 
  rec Plan_JN%ROWTYPE; 
  blank Plan_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Plan := :NEW.Plan; 
      rec.Carrera_Carrera := :NEW.Carrera_Carrera; 
      rec.Nombre := :NEW.Nombre; 
      rec.AnoInicial := :NEW.AnoInicial; 
      rec.CicloInicial := :NEW.CicloInicial; 
      rec.AnoFinal := :NEW.AnoFinal; 
      rec.CicloFinal := :NEW.CicloFinal; 
      rec.NumCreditosCierre := :NEW.NumCreditosCierre; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Plan := :OLD.Plan; 
      rec.Carrera_Carrera := :OLD.Carrera_Carrera; 
      rec.Nombre := :OLD.Nombre; 
      rec.AnoInicial := :OLD.AnoInicial; 
      rec.CicloInicial := :OLD.CicloInicial; 
      rec.AnoFinal := :OLD.AnoFinal; 
      rec.CicloFinal := :OLD.CicloFinal; 
      rec.NumCreditosCierre := :OLD.NumCreditosCierre; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Plan_JN VALUES rec; 
  END; 
  /CREATE TABLE prerreq (
    pensum_plan_carrera_carrera INTEGER NOT NULL,
    pensum_plan_plan            VARCHAR2(10) NOT NULL,
    pensum_curso_codigo         INTEGER NOT NULL,
    curso_codigo                INTEGER NOT NULL
);

ALTER TABLE prerreq
    ADD CONSTRAINT prerreq_pk PRIMARY KEY ( pensum_curso_codigo,
                                            pensum_plan_plan,
                                            pensum_plan_carrera_carrera,
                                            curso_codigo );


CREATE TABLE Prerreq_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Pensum_Plan_Carrera_Carrera INTEGER NOT NULL
 ,Pensum_Plan_Plan VARCHAR2 (10) NOT NULL
 ,Pensum_Curso_Codigo INTEGER NOT NULL
 ,Curso_Codigo INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Prerreq_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Prerreq for each row 
 Declare 
  rec Prerreq_JN%ROWTYPE; 
  blank Prerreq_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Pensum_Plan_Carrera_Carrera := :NEW.Pensum_Plan_Carrera_Carrera; 
      rec.Pensum_Plan_Plan := :NEW.Pensum_Plan_Plan; 
      rec.Pensum_Curso_Codigo := :NEW.Pensum_Curso_Codigo; 
      rec.Curso_Codigo := :NEW.Curso_Codigo; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Pensum_Plan_Carrera_Carrera := :OLD.Pensum_Plan_Carrera_Carrera; 
      rec.Pensum_Plan_Plan := :OLD.Pensum_Plan_Plan; 
      rec.Pensum_Curso_Codigo := :OLD.Pensum_Curso_Codigo; 
      rec.Curso_Codigo := :OLD.Curso_Codigo; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Prerreq_JN VALUES rec; 
  END; 
  /CREATE TABLE salon (
    edificio  VARCHAR2(10) NOT NULL,
    salon     VARCHAR2(10) NOT NULL,
    capacidad INTEGER NOT NULL
);

ALTER TABLE salon ADD CONSTRAINT salon_pk PRIMARY KEY ( edificio,
                                                        salon );


CREATE TABLE Salon_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Edificio VARCHAR2 (10) NOT NULL
 ,Salon VARCHAR2 (10) NOT NULL
 ,Capacidad INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Salon_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Salon for each row 
 Declare 
  rec Salon_JN%ROWTYPE; 
  blank Salon_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Edificio := :NEW.Edificio; 
      rec.Salon := :NEW.Salon; 
      rec.Capacidad := :NEW.Capacidad; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Edificio := :OLD.Edificio; 
      rec.Salon := :OLD.Salon; 
      rec.Capacidad := :OLD.Capacidad; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Salon_JN VALUES rec; 
  END; 
  /CREATE TABLE seccion (
    seccion         VARCHAR2(2) NOT NULL,
    anio            VARCHAR2(4) NOT NULL,
    ciclo           VARCHAR2(50) NOT NULL,
    curso_codigo    INTEGER NOT NULL,
    catedratico_cat INTEGER NOT NULL
);

ALTER TABLE seccion
    ADD CONSTRAINT seccion_pk PRIMARY KEY ( seccion,
                                            anio,
                                            ciclo,
                                            curso_codigo );


CREATE TABLE Seccion_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,Seccion VARCHAR2 (2) NOT NULL
 ,Anio VARCHAR2 (4) NOT NULL
 ,Ciclo VARCHAR2 (50) NOT NULL
 ,Curso_Codigo INTEGER NOT NULL
 ,Catedratico_Cat INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER Seccion_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Seccion for each row 
 Declare 
  rec Seccion_JN%ROWTYPE; 
  blank Seccion_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.Seccion := :NEW.Seccion; 
      rec.Anio := :NEW.Anio; 
      rec.Ciclo := :NEW.Ciclo; 
      rec.Curso_Codigo := :NEW.Curso_Codigo; 
      rec.Catedratico_Cat := :NEW.Catedratico_Cat; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.Seccion := :OLD.Seccion; 
      rec.Anio := :OLD.Anio; 
      rec.Ciclo := :OLD.Ciclo; 
      rec.Curso_Codigo := :OLD.Curso_Codigo; 
      rec.Catedratico_Cat := :OLD.Catedratico_Cat; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Seccion_JN VALUES rec; 
  END; 
  /ALTER TABLE asignacion
    ADD CONSTRAINT asignacion_estudiante_fk FOREIGN KEY ( estudiante_carnet )
        REFERENCES estudiante ( carnet );

ALTER TABLE asignacion
    ADD CONSTRAINT asignacion_seccion_fk FOREIGN KEY ( seccion_seccion,
                                                       seccion_anio,
                                                       seccion_ciclo,
                                                       seccion_curso_codigo )
        REFERENCES seccion ( seccion,
                             anio,
                             ciclo,
                             curso_codigo );

ALTER TABLE horario
    ADD CONSTRAINT horario_dia_fk FOREIGN KEY ( dia_dia )
        REFERENCES dia ( dia );

ALTER TABLE horario
    ADD CONSTRAINT horario_periodo_fk FOREIGN KEY ( periodo_periodo )
        REFERENCES periodo ( periodo );

ALTER TABLE horario
    ADD CONSTRAINT horario_salon_fk FOREIGN KEY ( salon_edificio,
                                                  salon_salon )
        REFERENCES salon ( edificio,
                           salon );

ALTER TABLE horario
    ADD CONSTRAINT horario_seccion_fk FOREIGN KEY ( seccion_seccion,
                                                    seccion_anio,
                                                    seccion_ciclo,
                                                    seccion_curso_codigo )
        REFERENCES seccion ( seccion,
                             anio,
                             ciclo,
                             curso_codigo );

ALTER TABLE inscrito
    ADD CONSTRAINT inscrito_carrera_fk FOREIGN KEY ( carrera_carrera )
        REFERENCES carrera ( carrera );

ALTER TABLE inscrito
    ADD CONSTRAINT inscrito_estudiante_fk FOREIGN KEY ( estudiante_carnet )
        REFERENCES estudiante ( carnet );

ALTER TABLE pensum
    ADD CONSTRAINT pensum_curso_fk FOREIGN KEY ( curso_codigo )
        REFERENCES curso ( codigo );

ALTER TABLE pensum
    ADD CONSTRAINT pensum_plan_fk FOREIGN KEY ( plan_plan,
                                                plan_carrera_carrera )
        REFERENCES plan ( plan,
                          carrera_carrera );

ALTER TABLE plan
    ADD CONSTRAINT plan_carrera_fk FOREIGN KEY ( carrera_carrera )
        REFERENCES carrera ( carrera );

ALTER TABLE prerreq
    ADD CONSTRAINT prerreq_curso_fk FOREIGN KEY ( curso_codigo )
        REFERENCES curso ( codigo );

ALTER TABLE prerreq
    ADD CONSTRAINT prerreq_pensum_fk FOREIGN KEY ( pensum_curso_codigo,
                                                   pensum_plan_plan,
                                                   pensum_plan_carrera_carrera )
        REFERENCES pensum ( curso_codigo,
                            plan_plan,
                            plan_carrera_carrera );

ALTER TABLE seccion
    ADD CONSTRAINT seccion_catedratico_fk FOREIGN KEY ( catedratico_cat )
        REFERENCES catedratico ( cat );

ALTER TABLE seccion
    ADD CONSTRAINT seccion_curso_fk FOREIGN KEY ( curso_codigo )
        REFERENCES curso ( codigo );



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            14
-- CREATE INDEX                             0
-- ALTER TABLE                             29
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
